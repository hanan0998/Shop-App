import 'dart:convert';
import 'dart:ffi';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

import 'product.dart';
import '../http_exception.dart';

// mixin the class by using 'with' keyword with ChangeNotifier
// because the provider package use it  behind the scene
class ProductProvider with ChangeNotifier {
  List<Product> _item = [
    // Product(
    //   id: 'p1',
    //   title: 'Red Shirt',
    //   description: 'A red shirt - it is pretty red!',
    //   price: 29.99,
    //   imageUrl:
    //       'https://cdn.pixabay.com/photo/2016/10/02/22/17/red-t-shirt-1710578_1280.jpg',
    // ),
    // Product(
    //   id: 'p2',
    //   title: 'Trousers',
    //   description: 'A nice pair of trousers.',
    //   price: 59.99,
    //   imageUrl:
    //       'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Trousers%2C_dress_%28AM_1960.022-8%29.jpg/512px-Trousers%2C_dress_%28AM_1960.022-8%29.jpg',
    // ),
    // Product(
    //   id: 'p3',
    //   title: 'Yellow Scarf',
    //   description: 'Warm and cozy - exactly what you need for the winter.',
    //   price: 19.99,
    //   imageUrl:
    //       'https://live.staticflickr.com/4043/4438260868_cc79b3369d_z.jpg',
    // ),
    // Product(
    //   id: 'p4',
    //   title: 'A Pan',
    //   description: 'Prepare any meal you want.',
    //   price: 49.99,
    //   imageUrl:
    //       'https://upload.wikimedia.org/wikipedia/commons/thumb/1/14/Cast-Iron-Pan.jpg/1024px-Cast-Iron-Pan.jpg',
    // ),
  ];

  // bool showFavoritesOnly = false;
  List<Product> get item {
    // if (showFavoritesOnly) {
    //   return _item.where((element) => element.isFavorite).toList();
    // } else {
    return [..._item];
    // }
  }

  List<Product> get favorItem {
    return _item.where((element) => element.isFavorite).toList();
  }

  // void showFavoriteOnly() {
  //   showFavoritesOnly = true;
  //   notifyListeners();
  // }

  // void showAll() {
  //   showFavoritesOnly = false;
  //   notifyListeners();
  // }

  Product findById(String id) {
    return _item.firstWhere((element) => element.id == id);
  }

  // when we use async we wrap the function when future and no need to return
  Future<void> addProduct(Product product) async {
    final url = Uri.https(
        'flutter-devlopment-default-rtdb.firebaseio.com', '/product.json');

    // wraping the code with 'try' where execution might give error
    try {
      // await mean dart will wait for this to first execute it and then come to next
      // storing the future of post in the reponse variable
      final response = await http.post(url,
          body: json.encode({
            'title': product.title,
            'description': product.description,
            'imageUrl': product.imageUrl,
            'price': product.price,
            'isFavorite': product.isFavorite
          }));
      print(json.decode(response.body));
      final item = Product(
          // giving the id generated by firebase
          id: json.decode(response.body)['name'],
          title: product.title,
          description: product.description,
          imageUrl: product.imageUrl,
          price: product.price);
      _item.add(item);
      notifyListeners();
      // the catch is run when the error occur in the try block code
    } catch (error) {
      print(error);
      throw error;
    }
  }

  // method to update the product
  Future<void> updateProduct(String id, Product product) async {
    final prodindex = _item.indexWhere((element) => element.id == id);
    if (prodindex >= 0) {
      final url = Uri.https('flutter-devlopment-default-rtdb.firebaseio.com',
          '/product/$id.json');
      await http.patch(url,
          body: json.encode({
            'title': product.title,
            'description': product.description,
            'imageUrl': product.imageUrl,
            'price': product.price
          }));
      _item[prodindex] = product;
      notifyListeners();
    } else {
      print('...');
    }
  }

  // method to delete the product
  Future<void> deleteProduct(String id) async {
    final url = Uri.https(
        'flutter-devlopment-default-rtdb.firebaseio.com', '/product/$id.json');
    final productIndex = _item.indexWhere((element) => element.id == id);
    var existingProduct = _item[productIndex];
    _item.removeAt(productIndex);
    notifyListeners();

    // _item.removeWhere((element) => element.id == id);
    final response = await http.delete(url);
    // to catch the error
    if (response.statusCode >= 400) {
      _item.insert(productIndex, existingProduct);
      notifyListeners();
      throw HttpException('Could not delted the Product');
    }
  }

  // adding method to fetch the data from the server
  Future<void> fetchAndSetData() async {
    final url = Uri.parse(
        'https://flutter-devlopment-default-rtdb.firebaseio.com/product.json');
    try {
      final response = await http.get(url);
      print("Fetch function is executed!");
      // print(json.decode(response.body));

      // convert the data in usefull fomr
      final extractedData = json.decode(response.body) as Map<String, dynamic>;
      final List<Product> loadedProducts = [];
      extractedData.forEach((prodId, prodData) {
        loadedProducts.add(
          Product(
              id: prodId,
              title: prodData['title'],
              description: prodData['description'],
              imageUrl: prodData['imageUrl'],
              price: prodData['price'],
              isFavorite: prodData['isFavorite']),
        );
      });
      _item = loadedProducts;
      notifyListeners();
    } catch (error) {
      throw error;
    }
  }
}
